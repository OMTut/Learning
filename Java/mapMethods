//takes a Map<String, String> and checks if the keys point to all unique values
public boolean isUnique(Map<String,String>startingMap) {
    //create a Set for keys (Sets do not allow duplicates)
    Set<String> keyCount = startingMap.keySet();
    int keySize = keyCount.size();
    
    //create a Set for values
    Set<String> valueSet = new HashSet<String> (startingMap.values());
    int valueSize = valueSet.size();
    
    return (keySize == valueSize);
}

/*
*  This takes two Maps and find their intersection.
*  1. Checks to see if MapB contains the key from Map A
*  2. if it does, it compares the values of MapB key to MapA key
*  3. If they're equal, it puts it into result map and returs
*/
public Map<String, Integer> intersect(Map<String, Integer> mapA, Map<String, Integer> mapB) {
    
    Map<String, Integer> result = new HashMap<>();
    
    for (String x : mapA.keySet()) {
        if ((mapB.containsKey(x)) && (mapA.get(x).equals(mapB.get(x)))) {
            result.put(x,mapA.get(x));
        }
    }
    
    return result;
}

/*
*  Method that accepts a list of integers, and returns the number of times the an integer occurrs the most
*  checks to see if the list is empty. if it is, returns 0
*  creates a storage hashMap
*  loops through the List and builds the map.
*  loops through the values of the map. comparing them to a max variable.
*/
public int maxOccurrences (List<Integer> data) {
    
    if (data.size() == 0) {
        return 0;
    }
    
    Map<Integer, Integer> intMap = new HashMap<>();
    
    
    for (int i = 0; i < data.size(); i++) {
        if (intMap.containsKey(data.get(i))) {
            int counter = intMap.get(data.get(i)) + 1;
            intMap.replace(data.get(i),counter);
        } else {
            intMap.put(data.get(i),1);
        }
    }
            
    //check map for maxOccurrence
    int max = 0;
    Collection<Integer> occurences = intMap.values();
    for (int n : occurences) {
         if (n > max) {
             max = n;
         }
    }
    return max;
}
